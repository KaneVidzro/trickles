generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  posts         Post[]
  comments      Comment[]
  reactions     Reaction[]
  notifications Notification[]

  followers Follow[] @relation("Followers")
  following Follow[] @relation("Following")
}

model Post {
  id        String   @id @default(cuid())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  content   String
  topicId   String
  tags      String[]
  createdAt DateTime @default(now())

  comments      Comment[]
  reactions     Reaction[]
  notifications Notification[]

  @@index([authorId, topicId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime @default(now())

  notifications Notification[]

  @@index([postId])
}

model Reaction {
  id        String   @id @default(cuid())
  type      String // e.g., "like", "upvote", "love", etc.
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId, type])
}

model Follow {
  id         String   @id @default(cuid())
  follower   User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String
  followed   User     @relation("Followers", fields: [followedId], references: [id], onDelete: Cascade)
  followedId String
  createdAt  DateTime @default(now())

  @@unique([followerId, followedId])
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      String // e.g., "follow", "comment", "system"
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String?

  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?
}
